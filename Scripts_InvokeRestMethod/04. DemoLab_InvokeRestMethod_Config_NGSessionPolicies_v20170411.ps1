# 20170317: NOT Working setup for Elektra computer
# Add the Gateway NetScaler configuration to the NetScaler VPX

#region NITRO settings
    $ContentType = "application/json"
    $NSIP = "192.168.59.2"
    # Prompt for credentials
#    $MyCreds =  Get-Credential
    # Build my own credentials variable, based on password string
    $PW = ConvertTo-SecureString "nsroot" -AsPlainText -Force
    $MyCreds = New-Object System.Management.Automation.PSCredential ("nsroot", $PW)
    $FileRoot = "H:\PSModules\NITRO\Scripts"

    $NSUserName = "nsroot"
    $NSUserPW = "nsroot"

    $strDate = Get-Date -Format yyyyMMddHHmmss

    # Store original VerbosePreference setting for later
    Write-Host ("Original Verbose Preference is: " + $VerbosePreference) -ForegroundColor Cyan
    $VerbosePrefOriginal = $VerbosePreference
    <#
        $VerbosePreference
        ------------------
        Determines how Windows PowerShell responds to verbose messages 
        generated by a script, cmdlet or provider, such as the messages
        generated by the Write-Verbose cmdlet. Typically, verbose messages
        describe the actions performed to execute a command. 

        By default, verbose messages are not displayed, but you can change
        this behavior by changing the value of $VerbosePreference.
   
        You can also use the Verbose common parameter of a cmdlet to display
        or hide the verbose messages for a specific command. For more
        information, type: "get-help about_commonparameters".
   
        Valid values:
          Stop:	
            Displays the verbose message and an error
            message and then stops executing.
   
          Inquire:
            Displays the verbose message and then 
            displays a prompt that asks you whether you
            want to continue.
   
          Continue:
            Displays the verbose message and then continues with execution.
   
          SilentlyContinue:
            Does not display the verbose message. Continues executing.
            (Default)    
    #>
#    $VerbosePreference = [System.Management.Automation.ActionPreference]::Continue
    $VerbosePreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
    Write-Host ("Verbose Preference is changed to: " + $VerbosePreference) -ForegroundColor Cyan
#endregion NITRO settings

Write-Host "------------------------------------------------------------------ " -ForegroundColor Yellow
Write-Host "| Pushing the Gateway configuration to NetScaler with NITRO:     | " -ForegroundColor Yellow
Write-Host "------------------------------------------------------------------ " -ForegroundColor Yellow

    #region !! Adding a presentation demo break !!
    # ********************************************
        Read-Host 'Press Enter to continue…' | Out-Null
        Write-Host
    #endregion

<# NITRO Documentation

URL:http://<netscaler-ip-address>/nitro/v1/config/vpnsessionaction
HTTP Method:POST
Request Headers:
Cookie:NITRO_AUTH_TOKEN=<tokenvalue>
Content-Type:application/json
Request Payload:
{"vpnsessionaction":{
      "name":<String_value>,

# Network Configuration
      "dnsvservername":<String_value>,
      "winsip":<String_value>,
      "killconnections":<String_value>,

#Client Experience
Display Home Page = selected

Home Page = https://sf.demo.lab/Citrix/StoreWeb
Plug-in Type = Java
Single Sign-On to Web Applications = selected
Credentials Index = PRIMAIRY


      "useraccounting":<String_value>,

      "homepage":<String_value>,

      "splittunnel":<String_value>,
      "sesstimeout":<Double_value>,
      "clientidletimeout":<Double_value>,

      "clientlessvpnmode":<String_value>,
      "clientlessmodeurlencoding":<String_value>,
      "clientlesspersistentcookie":<String_value>,

      "windowspluginupgrade":<String_value>,
      "macpluginupgrade":<String_value>,
      "linuxpluginupgrade":<String_value>,
      "alwaysonprofilename":<String_value>,

      "kcdaccount":<String_value>,
      "sso":<String_value>,
      "ssocredential":<String_value>,
      "windowsautologon":<String_value>,


      "httpport":<Integer[]_value>,
      "splitdns":<String_value>,
      "clientsecurity":<String_value>,
      "clientsecuritygroup":<String_value>,
      "clientsecuritymessage":<String_value>,
      "clientsecuritylog":<String_value>,
      "locallanaccess":<String_value>,
      "rfc1918":<String_value>,
      "spoofiip":<String_value>,
      "transparentinterception":<String_value>,
      "windowsclienttype":<String_value>,
      "defaultauthorizationaction":<String_value>,

#Security
Default Authorization Action = ALLOW

      "authorizationgroup":<String_value>,
      "smartgroup":<String_value>,

      "allprotocolproxy":<String_value>,
      "httpproxy":<String_value>,
      "ftpproxy":<String_value>,
      "socksproxy":<String_value>,
      "gopherproxy":<String_value>,
      "sslproxy":<String_value>,
      "proxyexception":<String_value>,
      "proxylocalbypass":<String_value>,
      "clientcleanupprompt":<String_value>,
      "forcecleanup":<String[]_value>,
      "clientoptions":<String_value>,
      "clientconfiguration":<String[]_value>,
      "usemip":<String_value>,
      "useiip":<String_value>,
      "clientdebug":<String_value>,
      "loginscript":<String_value>,
      "logoutscript":<String_value>,
      "clientchoices":<String_value>,
      "epaclienttype":<String_value>,
      "iipdnssuffix":<String_value>,
      "forcedtimeout":<Double_value>,
      "forcedtimeoutwarning":<Double_value>,
      "emailhome":<String_value>,
      "allowedlogingroups":<String_value>,
      "securebrowse":<String_value>,
      "sfgatewayauthtype":<String_value>,
      "iconwithreceiver":<String_value>,

#Published Applications

ICA Proxy = ON
Web Interface Address = https://sf.demo.lab/Citrix/StoreWeb
Web Interface Address Type = IPV4
Single Sign-On Domain = DEMO

      "icaproxy":<String_value>,
      "proxy":<String_value>,
      "wihome":<String_value>,
      "storefronturl":<String_value>,
      "wihomeaddresstype":<String_value>,
      "wiportalmode":<String_value>,
      "ntdomain":<String_value>,
      "citrixreceiverhome":<String_value>,

#Remote Desktop
      "rdpclientprofilename":<String_value>
}}
Response:
HTTP Status Code on Success: 201 Created
HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error

#>

# ----------------------------------------
# | Method #1: Using the SessionVariable |
# ----------------------------------------
#region Start NetScaler NITRO Session
    #Connect to the NetScaler VPX Virtual Appliance
    $Login = @{"login" = @{"username"=$NSUserName;"password"=$NSUserPW;"timeout"=”900”}} | ConvertTo-Json
    $dummy = Invoke-RestMethod -Uri "http://$NSIP/nitro/v1/config/login" -Body $Login -Method POST -SessionVariable NetScalerSession -ContentType $ContentType -Verbose:$VerbosePreference -ErrorAction SilentlyContinue
#endregion Start NetScaler NITRO Session

# -------------------------------------
# | Enable require NetScaler Features |
# -------------------------------------
#region Enable NetScaler Basic & Advanced Features
    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/nsfeature?action=enable"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    # enable ns feature VPN

    $payload = @{
    "nsfeature"= @{
        "feature"=@("SSLVPN")
        }
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    Invoke-RestMethod -Method Post -Uri $strURI -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Enable NetScaler Basic & Advanced Features


# ----------------------------------------------
# | Add VPN Session Profile - Receiver for Web |
# ----------------------------------------------
#region Add VPN Session Profile - Receiver for Web
    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/vpnsessionaction"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    # add vpn sessionAction WB_prof -transparentInterception OFF -defaultAuthorizationAction ALLOW -SSO ON -ssoCredential PRIMARY -homePage "https://sf.demo.lab/Citrix/StoreWeb" -icaProxy ON -wihome "https://sf.demo.lab/Citrix/StoreWeb" -ntDomain DEMO 

    $payload = @{
    "vpnsessionaction"= @{
        "name"="AC_WB_testing";
    # If you are using the NetScaler Gateway Plug-in for Windows, set this parameter to ON, in which the mode is set to transparent. If you are using the NetScaler Gateway Plug-in for Java, set this parameter to OFF.
        "transparentinterception"="OFF";
    # Specify the network resources that users have access to when they log on to the internal network.
        "defaultauthorizationaction" = "ALLOW";
        "sso" = "ON";
        "ssocredential" = "PRIMARY";
        "homepage" = "https://sf.demo.lab/Citrix/StoreWeb";
        "icaproxy" = "ON";
        "wihome" = "https://sf.demo.lab/Citrix/StoreWeb";
        "ntdomain" = "DEMO";
        }
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    Invoke-RestMethod -Uri "http://$NSIP/nitro/v1/config/vpnsessionaction" -Method Post -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Add VPN Session Profile - Receiver for Web

# ---------------------------------------------
# | Add VPN Session Policy - Receiver for Web |
# ---------------------------------------------
#region Add VPN Session Policy - Receiver for Web
<#
NITRO Documentation:

add
URL:http://<netscaler-ip-address>/nitro/v1/config/vpnsessionpolicy
HTTP Method:POST
Request Headers:
Cookie:NITRO_AUTH_TOKEN=<tokenvalue>
Content-Type:application/json
Request Payload:
{"vpnsessionpolicy":{
      "name":<String_value>,
      "rule":<String_value>,
      "action":<String_value>
}}
Response:
HTTP Status Code on Success: 201 Created
HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
#>

    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/vpnsessionpolicy"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    #add vpn sessionPolicy WB_pol "REQ.HTTP.HEADER User-Agent NOTCONTAINS CitrixReceiver && REQ.HTTP.HEADER Referer EXISTS" WB_prof

    $payload = @{
    "vpnsessionpolicy"= @{
        "name" = "PL_WB_testing";
        "rule" = "REQ.HTTP.HEADER User-Agent NOTCONTAINS CitrixReceiver && REQ.HTTP.HEADER Referer EXISTS";
        "action" = "AC_WB_testing";
        }
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    Invoke-RestMethod -Uri "http://$NSIP/nitro/v1/config/vpnsessionpolicy" -Method Post -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Add VPN Session Policy - Receiver for Web

# ---------------------------------------------
# | Add VPN Session Profile - Native Receiver |
# ---------------------------------------------
#region Add VPN Session Profile - Native Receiver
    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/vpnsessionaction"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    # add vpn sessionAction OS_prof -transparentInterception OFF -defaultAuthorizationAction ALLOW -SSO ON -ssoCredential PRIMARY -icaProxy ON -wihome "https://sf.demo.lab/Citrix/Store" -ntDomain DEMO -storefronturl "https://sf.demo.lab"

    $payload = @{
    "vpnsessionaction"= @{
        "name"="AC_OS_testing";
    # If you are using the NetScaler Gateway Plug-in for Windows, set this parameter to ON, in which the mode is set to transparent. If you are using the NetScaler Gateway Plug-in for Java, set this parameter to OFF.
        "transparentinterception"="OFF";
    # Specify the network resources that users have access to when they log on to the internal network.
        "defaultauthorizationaction" = "ALLOW";
        "sso" = "ON";
        "ssocredential" = "PRIMARY";
        "icaproxy" = "ON";
        "wihome" = "https://sf.demo.lab/Citrix/Store";
        "ntdomain" = "DEMO";
    # Web address for StoreFront to be used in this session for enumeration of resources from XenApp or XenDesktop. (Account Services Address)
        "storefronturl" = "https://sf.demo.lab";
        }
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    Invoke-RestMethod -Uri "http://$NSIP/nitro/v1/config/vpnsessionaction" -Method Post -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Add VPN Session Profile - Native Receiver

# --------------------------------------------
# | Add VPN Session Policy - Native Receiver |
# --------------------------------------------
#region Add VPN Session Policy - Native Receiver
<#
NITRO Documentation:

add
URL:http://<netscaler-ip-address>/nitro/v1/config/vpnsessionpolicy
HTTP Method:POST
Request Headers:
Cookie:NITRO_AUTH_TOKEN=<tokenvalue>
Content-Type:application/json
Request Payload:
{"vpnsessionpolicy":{
      "name":<String_value>,
      "rule":<String_value>,
      "action":<String_value>
}}
Response:
HTTP Status Code on Success: 201 Created
HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
#>

    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/vpnsessionpolicy"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    #add vpn sessionPolicy OS_pol "REQ.HTTP.HEADER User-Agent CONTAINS CitrixReceiver" OS_prof

    $payload = @{
    "vpnsessionpolicy"= @{
        "name" = "PL_OS_testing";
        "rule" = "REQ.HTTP.HEADER User-Agent CONTAINS CitrixReceiver";
        "action" = "AC_OS_testing";
        }
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    Invoke-RestMethod -Uri "http://$NSIP/nitro/v1/config/vpnsessionpolicy" -Method Post -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Add VPN Session Policy - Native Receiver



# --------------------------------------------
# | Add NGW vServer                          |
# --------------------------------------------
#region Add VPN vServer
<#
    add
    URL:http://<netscaler-ip-address>/nitro/v1/config/vpnvserver
    HTTP Method:POST
    Request Headers:
    Cookie:NITRO_AUTH_TOKEN=<tokenvalue>
    Content-Type:application/json
    Request Payload:
    {"vpnvserver":{
          "name":<String_value>,
          "servicetype":<String_value>,
          "ipv46":<String_value>,
          "range":<Double_value>,
          "port":<Integer_value>,
          "state":<String_value>,
          "authentication":<String_value>,
          "doublehop":<String_value>,
          "maxaaausers":<Double_value>,
          "icaonly":<String_value>,
          "icaproxysessionmigration":<String_value>,
          "dtls":<String_value>,
          "loginonce":<String_value>,
          "advancedepa":<String_value>,
          "devicecert":<String_value>,
          "certkeynames":<String_value>,
          "downstateflush":<String_value>,
          "listenpolicy":<String_value>,
          "listenpriority":<Double_value>,
          "tcpprofilename":<String_value>,
          "httpprofilename":<String_value>,
          "comment":<String_value>,
          "appflowlog":<String_value>,
          "icmpvsrresponse":<String_value>,
          "rhistate":<String_value>,
          "netprofile":<String_value>,
          "cginfrahomepageredirect":<String_value>,
          "maxloginattempts":<Double_value>,
          "failedlogintimeout":<Double_value>,
          "l2conn":<String_value>,
          "deploymenttype":<String_value>,
          "rdpserverprofilename":<String_value>,
          "windowsepapluginupgrade":<String_value>,
          "linuxepapluginupgrade":<String_value>,
          "macepapluginupgrade":<String_value>,
          "userdomains":<String_value>,
          "authnprofile":<String_value>,
          "vserverfqdn":<String_value>
    }}
    Response:
    HTTP Status Code on Success: 201 Created
    HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
#>

    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/vpnvserver"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    # add vpn vserver test SSL 192.168.59.102 443 -maxAAAUsers 50 -icaOnly ON -downStateFlush DISABLED -Listenpolicy NONE

    $payload = @{
        "vpnvserver"= @{
          "name"="nsg-vpn-test";
          "servicetype"="SSL";
          "ipv46"="192.168.59.102";
          "port"=443;
          "state"="ENABLED";
          "maxaaausers"=50;
          "icaonly"="ON";
          "downstateflush"="DISABLED";
          "listenpolicy"="NONE";
          "comment"="created by PowerShell script";
        }
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    $response = Invoke-RestMethod -Uri $strURI -Method Post -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Bind VPN Session Policies to VPN vServer


# --------------------------------------------
# | Bind VPN Session Policies to VPN vServer |
# --------------------------------------------
#region Bind VPN Session Policies to VPN vServer (bulk)
<#
NITRO Documentation:

add:
URL:http://<netscaler-ip-address/nitro/v1/config/vpnvserver_vpnsessionpolicy_binding
HTTP Method:PUT
Request Headers:
Cookie:NITRO_AUTH_TOKEN=<tokenvalue>
Content-Type:application/json
Request Payload:
{
"vpnvserver_vpnsessionpolicy_binding":{
      "name":<String_value>,
      "policy":<String_value>,
      "priority":<Double_value>,
      "secondary":<Boolean_value>,
      "groupextraction":<Boolean_value>,
      "gotopriorityexpression":<String_value>,
      "bindpoint":<String_value>
}}
Response:
HTTP Status Code on Success: 201 Created
HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
#>

    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/vpnvserver_vpnsessionpolicy_binding"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    #bind vpn vserver nsg-vpn-test -policy OS_pol -priority 100

    $payload = @{
        "vpnvserver_vpnsessionpolicy_binding"= @(
            @{"name"="nsg-vpn-test";"policy"="PL_WB_testing";"priority"=100},
            @{"name"="nsg-vpn-test";"policy"="PL_OS_testing";"priority"=110}
        )
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    $response = Invoke-RestMethod -Uri $strURI -Method Put -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Bind VPN Session Policies to VPN vServer



# ---------------------------------------
# | Bind VPN STA servers to VPN vServer |
# ---------------------------------------
#region Bind VPN STA servers to VPN vServer (bulk)
<#
NITRO Documentation:

add:
URL:http://<netscaler-ip-address/nitro/v1/config/vpnvserver_staserver_binding
HTTP Method:PUT
Request Headers:
Cookie:NITRO_AUTH_TOKEN=<tokenvalue>
Content-Type:application/json
Request Payload:
{
"vpnvserver_staserver_binding":{
      "name":<String_value>,
      "staserver":<String_value>,
      "staaddresstype":<String_value>
}}
Response:
HTTP Status Code on Success: 201 Created
HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
#>

    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/vpnvserver_staserver_binding"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    #bind vpn vserver nsg-vpn-test -staServer "http://192.168.59.25"

    $payload = @{
        "vpnvserver_staserver_binding"= @(
            @{"name" = "nsg-vpn-test"; "staserver" = "http://xd1.demo.lab"; "staaddresstype" = "IPV4"},
            @{"name" = "nsg-vpn-test"; "staserver" = "http://xd2.demo.lab"; "staaddresstype" = "IPV4"}
        )
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    $response = Invoke-RestMethod -Uri $strURI -Method Put -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Bind VPN STA servers to VPN vServer

# ---------------------------------------
# | Bind SSL certificate to VPN vServer |
# ---------------------------------------
#region Bind SSL certificate to VPN vServer
<#
NITRO Documentation:

add:
URL:http://<netscaler-ip-address/nitro/v1/config/sslvserver_sslcertkey_binding
HTTP Method:PUT
Request Headers:
Cookie:NITRO_AUTH_TOKEN=<tokenvalue>
Content-Type:application/json
Request Payload:
{
"sslvserver_sslcertkey_binding":{
      "vservername":<String_value>,
      "certkeyname":<String_value>,
      "ca":<Boolean_value>,
      "crlcheck":<String_value>,
      "skipcaname":<Boolean_value>,
      "snicert":<Boolean_value>,
      "ocspcheck":<String_value>
}}
Response:
HTTP Status Code on Success: 201 Created
HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
#>

    # Specifying the correct URL 
    $strURI = "http://$NSIP/nitro/v1/config/sslvserver_sslcertkey_binding"

    # Creating the right payload formatting (mind the Depth for the nested arrays)
    #bind ssl vserver nsg-vpn-test -certkeyName wildcard.demo.lab

    $payload = @{
    "sslvserver_sslcertkey_binding"= @{
        "vservername" = "nsg-vpn-test";
        "certkeyname" = "wildcard.demo.lab"
        }
    } | ConvertTo-Json -Depth 5

    # Logging NetScaler Instance payload formatting
    Write-Host "payload: " -ForegroundColor Yellow
    Write-Host $payload -ForegroundColor Green

    # Method #1: Making the REST API call to the NetScaler
    $response = Invoke-RestMethod -Uri $strURI -Method Put -Body $payload -ContentType $ContentType -WebSession $NetScalerSession -Verbose:$VerbosePreference
#endregion Bind SSL certificate to VPN vServer


<#
CLI:

add authentication ldapAction dc001_LDAP_svr -serverIP 192.168.59.10 -ldapBase "cn=demo,cn=lab" -ldapBindDn administrator@demo.lab -ldapLoginName sAMAccountName
add authentication ldapPolicy Demo_LDAP_pol ns_true dc001_LDAP_svr

add vpn vserver nsg-vpn-test SSL 192.168.59.12 443 -icaOnly ON -downStateFlush DISABLED -Listenpolicy NONE

add vpn sessionAction OS_prof -transparentInterception OFF -defaultAuthorizationAction ALLOW -SSO ON -ssoCredential PRIMARY -icaProxy ON -wihome "https://sf.demo.lab/Citrix/Store" -ntDomain DEMO -storefronturl "https://sf.demo.lab"
add vpn sessionAction WB_prof -transparentInterception OFF -defaultAuthorizationAction ALLOW -SSO ON -ssoCredential PRIMARY -homePage "https://sf.demo.lab/Citrix/StoreWeb" -icaProxy ON -wihome "https://sf.demo.lab/Citrix/StoreWeb" -ntDomain DEMO

add vpn sessionPolicy OS_pol "REQ.HTTP.HEADER User-Agent CONTAINS CitrixReceiver" OS_prof
add vpn sessionPolicy WB_pol "REQ.HTTP.HEADER User-Agent NOTCONTAINS CitrixReceiver && REQ.HTTP.HEADER Referer EXISTS" WB_prof

set vpn parameter -forceCleanup none -clientConfiguration all -clientversions "unable "

bind vpn vserver nsg-vpn-test -staServer "http://192.168.59.25"

bind vpn vserver nsg-vpn-test -policy Demo_LDAP_pol -priority 100

bind vpn vserver nsg-vpn-test -policy OS_pol -priority 100
bind vpn vserver nsg-vpn-test -policy WB_pol -priority 110

bind ssl vserver nsg-vpn-test -certkeyName wildcard.demo.lab

#>